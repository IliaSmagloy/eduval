# For full config options, check the docs:
#    docs.serverless.com

service:        dbFunctions

# contains the credentials needed to connect to the DB
custom:
    secrets:    ${file(secrets.json)}

provider:
    name:       aws
    runtime:    nodejs8.10
    stage:      dev
    region:     eu-central-1
    apiKeys:
        - myApiKey

    # defines environment variables for connecting to DB
    environment:
        DB_NAME:        ${self:custom.secrets.DB_NAME}
        DB_USER:        ${self:custom.secrets.DB_USER}
        DB_PASSWORD:    ${self:custom.secrets.DB_PASSWORD}
        DB_HOST:        ${self:custom.secrets.DB_HOST}
        DB_PORT:        ${self:custom.secrets.DB_PORT}

    functions:
        hello:
            handler: handler.hello

        getTeacher:
            handler: handler.getTeacher
            description: Get information about a teacher by their ID.
            events:
                - http:
                    path: teacher/{id}
                    method: get
                    private: true
                    request:
                        parameters:
                            paths:
                                id: true
        getCourse:
            handler: handler.getCourse
        getRegistredStudents:
            handler: handler.getRegistredStudents
        getStudent:
            handler: handler.getStudent

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
