# For full config options, check the docs:
#    docs.serverless.com

service:        dbFunctions

# contains the credentials needed to connect to the DB
custom:
    secrets:    ${file(secrets.json)}

provider:
    name:       aws
    runtime:    nodejs8.10
    stage:      dev
    region:     eu-central-1
    apiKeys:
        - myApiKey

    # defines environment variables for connecting to DB
    environment:
        DB_NAME:        ${self:custom.secrets.DB_NAME}
        DB_USER:        ${self:custom.secrets.DB_USER}
        DB_PASSWORD:    ${self:custom.secrets.DB_PASSWORD}
        DB_HOST:        ${self:custom.secrets.DB_HOST}
        DB_PORT:        ${self:custom.secrets.DB_PORT}

#TODO: Implement a more strict CORS policy
functions:
    #teacher
    getTeacherByToken:
        handler: teacher/get.byToken
        description: Get information about a teacher by their Auth Token.
        events:
            - http:
                path: teacher/byToken/{authToken}
                method: get
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            authToken: true
    getTeacherById:
        handler: teacher/get.byId
        description: Get information about a teacher by their ID.
        events:
            - http:
                path: teacher/{teacherId}
                method: get
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            teacherId: true
    deleteTeacher:
        handler: teacher/delete.handler
        description: Delete teacher with a certain ID.
        events:
            - http:
                path: teacher/{teacherId}
                method: delete
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            teacherId: true
    updateTeacher:
        handler: teacher/update.handler
        description: Update a teacher's information.
        events:
            - http:
                path: teacher
                method: put
                private: true
                cors: true
    addTeacher:
        handler: teacher/create.handler
        description: Create a new teacher.
        events:
            - http:
                path: teacher
                method: post
                private: true
                cors: true

    #student
    getStudentByToken:
        handler: student/get.byToken
        description: Get information about a student by their Auth Token.
        events:
            - http:
                path: student/byToken/{authToken}
                method: get
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            authToken: true
    getStudentById:
        handler: student/get.byId
        description: Get information about a student by their ID.
        events:
            - http:
                path: student/{studentId}
                method: get
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            studentId: true
    deleteStudent:
        handler: student/delete.handler
        description: Delete student with a certain ID.
        events:
            - http:
                path: student/{studentId}
                method: delete
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            studentId: true
    updateStudent:
        handler: student/update.handler
        description: Update a student's information.
        events:
            - http:
                path: student
                method: put
                private: true
                cors: true
    addStudent:
        handler: student/create.handler
        description: Create a new student.
        events:
            - http:
                path: student
                method: post
                private: true
                cors: true

    #course
    updateCourse:
        handler: course/update.handler
        description: Update a course's information.
        events:
            - http:
                path: course
                method: put
                private: true
                cors: true
    addCourse:
        handler: course/create.handler
        description: Create a new course.
        events:
            - http:
                path: course
                method: post
                private: true
                cors: true
    getCourseById:
        handler: course/get.byId
        description: Get information about a course by their ID.
        events:
            - http:
                path: course/{courseId}
                method: get
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            courseId: true
    getCoursesByTeacher:
        handler: course/get.byId
        description: Get information about a course by their ID.
        events:
            - http:
                path: course/byTeacher/{teacherId}
                method: get
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            teacherId: true
    deleteCourse:
        handler: course/delete.handler
        description: Delete course with a certain ID.
        events:
            - http:
                path: course/{courseId}
                method: delete
                private: true
                cors: true
                request:
                    parameters:
                        paths:
                            courseId: true
