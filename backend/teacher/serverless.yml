# For full config options, check the docs:
#    docs.serverless.com

service:        teacher

provider:
    name:       aws
    runtime:    nodejs8.10
    stage:      dev
    region:     eu-central-1
    
    # defines environment variables for connecting to DB
    environment:
        DB_NAME:        ${self:custom.secrets.DB_NAME}
        DB_USER:        ${self:custom.secrets.DB_USER}
        DB_PASSWORD:    ${self:custom.secrets.DB_PASSWORD}
        DB_HOST:        ${self:custom.secrets.DB_HOST}
        DB_PORT:        ${self:custom.secrets.DB_PORT}
        LAMBDA_ENDPOINT:        ${self:custom.secrets.LAMBDA_ENDPOINT}
        LAMBDA_APIKEY:        ${self:custom.secrets.LAMBDA_APIKEY}

#package:
#    individually: true

plugins:
    - serverless-offline
    - serverless-domain-manager

custom:
    # contains the credentials needed to connect to the DB
    secrets:    ${file(secrets.json)}
    customDomainEnabled:
        dev: false
        prod: true
    customDomain:
        domainName: 'api.emon-teach.com'
        basePath: 'teacher' # This will be prefixed to all routes
        stage: ${self:provider.stage}
        createRoute53Record: true
        enabled: ${self:custom.customDomainEnabled.${self:provider.stage}}

#TODO: Implement a more strict CORS policy
functions:
    getTeacherByToken:
        handler: src/get.byToken
        description: Get information about a teacher by their Auth Token.
        events:
            - http:
                path: byToken/{authToken}
                method: get
                cors: true
                authorizer:
                    arn: arn:aws:lambda:eu-central-1:731151862442:function:authorizer-dev-auth
                request:
                    parameters:
                        paths:
                            authToken: true
    getTeacherById:
        handler: src/get.byId
        description: Get information about a teacher by their ID.
        events:
            - http:
                path: /{teacherId}
                method: get
                cors: true
                authorizer:
                    arn: arn:aws:lambda:eu-central-1:731151862442:function:authorizer-dev-auth
                request:
                    parameters:
                        paths:
                            teacherId: true
    getActiveLesson:
        handler: src/get.activeLesson
        description: Get information about a teacher by their Auth Token.
        events:
            - http:
                path: /{teacherId}/activeLesson
                method: get
                cors: true
                authorizer:
                    arn: arn:aws:lambda:eu-central-1:731151862442:function:authorizer-dev-auth
                request:
                    parameters:
                        paths:
                            teacherId: true
    deleteTeacher:
        handler: src/delete.handler
        description: Delete teacher with a certain ID.
        events:
            - http:
                path: /{teacherId}
                method: delete
                cors: true
                authorizer:
                    arn: arn:aws:lambda:eu-central-1:731151862442:function:authorizer-dev-auth
                request:
                    parameters:
                        paths:
                            teacherId: true
    updateTeacher:
        handler: src/update.handler
        description: Update a teacher's information.
        events:
            - http:
                path: /
                method: put
                cors: true
                authorizer:
                    arn: arn:aws:lambda:eu-central-1:731151862442:function:authorizer-dev-auth
    addTeacher:
        handler: src/create.handler
        description: Create a new teacher.
        events:
            - http:
                path: /
                method: post
                cors: true
                authorizer:
                    arn: arn:aws:lambda:eu-central-1:731151862442:function:authorizer-dev-auth
