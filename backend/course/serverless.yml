# For full config options, check the docs:
#    docs.serverless.com

service:        course

provider:
    name:       aws
    runtime:    nodejs8.10
    stage:      prod
    region:     eu-central-1

    # defines environment variables for connecting to DB
    environment:
        AUTHORIZER_ARN:             ${self:custom.secrets.AUTHORIZER_ARN}
        DB_NAME:        ${self:custom.secrets.DB_NAME}
        DB_USER:        ${self:custom.secrets.DB_USER}
        DB_PASSWORD:    ${self:custom.secrets.DB_PASSWORD}
        DB_HOST:        ${self:custom.secrets.DB_HOST.${self:provider.stage}}
        DB_PORT:        ${self:custom.secrets.DB_PORT}
        LAMBDA_ENDPOINT:        ${self:custom.secrets.LAMBDA_ENDPOINT}
        LAMBDA_APIKEY:        ${self:custom.secrets.LAMBDA_APIKEY}
        AUTH0_MANAGEMENT_CLIENT_ID:        ${self:custom.secrets.AUTH0_MANAGEMENT_CLIENT_ID}
        AUTH0_MANAGEMENT_CLIENT_SECRET:        ${self:custom.secrets.AUTH0_MANAGEMENT_CLIENT_SECRET}

#package:
#    individually: true

plugins:
    - serverless-domain-manager

custom:
    domains:
        prod: api.emon-teach.com
        dev: dev-api.emon-teach.com

    # contains the credentials needed to connect to the DB
    secrets:    ${file(secrets.json)}
    customDomainEnabled:
        dev: true
        prod: true
    customDomain:
        domainName: ${self:custom.domains.${self:provider.stage}}
        basePath: 'course' # This will be prefixed to all routes
        stage: ${self:provider.stage}
        createRoute53Record: true
        enabled: ${self:custom.customDomainEnabled.${self:provider.stage}}

#TODO: Implement a more strict CORS policy
functions:
    #course
    updateCourse:
        handler: src/update.handler
        description: Update a course's information.
        events:
            - http:
                path: /
                method: put
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
    addCourse:
        handler: src/create.handler
        description: Create a new course.
        events:
            - http:
                path: /
                method: post
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
    getCourseById:
        handler: src/get.byId
        description: Get information about a course by their ID.
        events:
            - http:
                path: /{courseId}
                method: get
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            courseId: true
    getPurchasedItems:
        handler: src/get.purchasedItems
        description: Get the shop items that were used in this course.
        events:
            - http:
                path: /{courseId}/purchasedItems
                method: get
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            courseId: true
    getCoursesByTeacher:
        handler: src/get.byTeacherId
        description: Get courses taught by a certain teacher.
        events:
            - http:
                path: byTeacher/{teacherId}
                method: get
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            teacherId: true
    getCoursesByStudent:
        handler: src/get.byStudentId
        description: Get courses a student is registered in.
        events:
            - http:
                path: byStudent/{studentId}
                method: get
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            studentId: true
    deleteCourse:
        handler: src/delete.handler
        description: Delete course with a certain ID.
        events:
            - http:
                path: /{courseId}
                method: delete
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            courseId: true
    getCourseRegistered:
        handler: src/registered/get.handler
        description: Get students registered to course.
        events:
            - http:
                path: /{courseId}/registered
                method: get
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            courseId: true
    addCourseRegistered:
        handler: src/registered/add.handler
        description: Register students to a course.
        events:
            - http:
                path: /{courseId}/registered
                method: post
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            courseId: true
    removeCourseRegistered:
        handler: src/registered/delete.handler
        description: Register students to a course.
        events:
            - http:
                path: /{courseId}/registered/{studentId}
                method: delete
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            courseId: true
                            studentId: true
    getRegisteredWithEmons:
        handler: src/registered/getEmons.handler
        description: Get students registered to course.
        events:
            - http:
                path: /{courseId}/registered/emons
                method: get
                cors: true
                authorizer:
                    arn: ${self:custom.secrets.AUTHORIZER_ARN}
                request:
                    parameters:
                        paths:
                            courseId: true

resources:
    Resources:
        # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
        GatewayResponse:
            Type: 'AWS::ApiGateway::GatewayResponse'
            Properties:
                ResponseParameters:
                    gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                    gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
                ResponseType: EXPIRED_TOKEN
                RestApiId:
                    Ref: 'ApiGatewayRestApi'
                StatusCode: '401'
        AuthFailureGatewayResponse:
            Type: 'AWS::ApiGateway::GatewayResponse'
            Properties:
                ResponseParameters:
                    gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                    gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
                ResponseType: UNAUTHORIZED
                RestApiId:
                    Ref: 'ApiGatewayRestApi'
                StatusCode: '401'
